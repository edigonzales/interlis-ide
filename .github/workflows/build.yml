name: Build, package and test

on:
  push:
    branches:
      - master
    tags:
      - "v*"
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:
    paths-ignore:
      - 'docs/**'
  # pull_request:
  #   branches:
  #     - master

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.os }}, Node.js v${{ matrix.node }}

    env:
      BUILD_NUMBER: ${{ github.run_number }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, ubuntu-22.04, ubuntu-22.04-arm, macos-13, macos-14] # macOS-13 is for x64, macOS-14 is for arm64
        #os: [ubuntu-22.04, macos-14]
        #os: [windows-2022, ubuntu-22.04, macos-13, macos-14]
        #os: [ubuntu-22.04-arm]
        node: ["22.x"]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          fetch-depth: 0 # To fetch all history for all branches and tags. (Will be required for caching with lerna: https://github.com/markuplint/markuplint/pull/111)

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@1a4442cacd436585916779262731d5b162bc6ec7 # v3.8.2
        with:
          node-version: ${{ matrix.node }}
          registry-url: "https://registry.npmjs.org"
          cache: 'yarn'

      - name: Use Python 3.13
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'
  
      - name: Build prod package 
        if: runner.os != 'Linux' || runner.arch != 'ARM64'
        shell: bash
        run: |
          yarn --skip-integrity-check --network-timeout 100000
          yarn build 
          yarn download:plugins
          yarn electron package:prod
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build prod package (Linux ARM)
        if: runner.os == 'Linux' && runner.arch == 'ARM64'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install --no-document fpm
          yarn --skip-integrity-check --network-timeout 100000
          yarn build 
          yarn download:plugins
          yarn electron package:prod
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_SYSTEM_FPM: "true"

      - name: Upload Mac Dist Files
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 #4.6.1
        with:
          name: ${{ matrix.os == 'macos-13' && 'mac-x64' || matrix.os == 'macos-14' && 'mac-arm64'}}
          path: |
            applications/electron/dist/**
            !applications/electron/dist/mac/**
            !applications/electron/dist/mac-arm64/**
          #retention-days: 1

      - name: Upload Windows Dist Files
        if: runner.os == 'Windows' 
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 #4.6.1
        with:
          name: windows
          path: |
            applications/electron/dist/**
          #retention-days: 1

      - name: Upload Linux Dist Files
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 #4.6.1
        with:
          name: ${{ matrix.os == 'ubuntu-22.04' && 'linux-x64' || matrix.os == 'ubuntu-22.04-arm' && 'linux-arm64'}}
          path: |
            applications/electron/dist/**
          #retention-days: 1

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    #if: startsWith(github.ref, 'refs/tags/v')
    
    steps:

      - name: Download all artifacts from build matrix
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          merge-multiple: false
          path: release_assets

      - name: Debug 
        shell: bash
        run: |
          ls -la release_assets

      - name: Qualify installer filenames with arch
        shell: bash
        working-directory: release_assets
        run: |
          set -euo pipefail

          qualify_dir() {
            local dir="$1" arch="$2"
            [ -d "$dir" ] || return 0

            shopt -s nullglob

            # DMG (+ blockmap) — macOS
            for f in "$dir"/*.dmg "$dir"/*.dmg.blockmap; do
              [ -e "$f" ] || continue
              # Skip if already qualified
              [[ "$f" == *"-${arch}.dmg"* ]] && continue
              if [[ "$f" == *.blockmap ]]; then
                base="${f%.blockmap}"                     # drop .blockmap
                stem="${base%.*}" ext="${base##*.}"      # split at last dot
                mv -v -- "$f" "${stem}-${arch}.${ext}.blockmap"
              else
                stem="${f%.*}" ext="${f##*.}"
                mv -v -- "$f" "${stem}-${arch}.${ext}"
              fi
            done

            # AppImage — Linux
            for f in "$dir"/*.AppImage; do
              [ -e "$f" ] || continue
              [[ "$f" == *"-${arch}.AppImage" ]] && continue
              stem="${f%.*}" ext="${f##*.}"
              mv -v -- "$f" "${stem}-${arch}.${ext}"
            done

            # .deb — Linux
            for f in "$dir"/*.deb; do
              [ -e "$f" ] || continue
              [[ "$f" == *"-${arch}.deb" ]] && continue
              stem="${f%.*}" ext="${f##*.}"
              mv -v -- "$f" "${stem}-${arch}.${ext}"
            done

            # NOTE:
            # - Do NOT rename latest*.yml (auto-updater expects exact names)
            # - mac ZIPs + their blockmaps are already qualified by electron-builder; leave them
            # - Windows left as-is (your call)
          }

          qualify_dir mac-arm64 arm64
          qualify_dir mac-x64   x64
          qualify_dir linux-arm64 arm64
          qualify_dir linux-x64   x64
          # Windows: no qualification needed

      - name: Debug 
        shell: bash
        run: |
          ls -la release_assets/mac-arm64
          ls -la release_assets/mac-x64
          ls -la release_assets/linux-arm64
          ls -la release_assets/linux-x64

      - name: Install YAML lib for merge script
        shell: bash
        working-directory: release_assets
        run: npm i yaml --no-save

      - name: Merge mac latest-mac.yml (x64 + arm64) into one
        if: |
          hashFiles('release_assets/mac-x64/latest-mac.yml') != '' &&
          hashFiles('release_assets/mac-arm64/latest-mac.yml') != ''
        shell: bash
        working-directory: release_assets
        run: |
          set -euo pipefail
          node - <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const yaml = require('yaml');

          function readYml(p) {
            return yaml.parse(fs.readFileSync(p, 'utf8'));
          }
          const x64 = readYml(path.join('mac-x64', 'latest-mac.yml'));
          const arm = readYml(path.join('mac-arm64', 'latest-mac.yml'));

          // Merge: keep the higher version/releaseDate, union files
          const out = { ...x64 };
          out.files = [...(x64.files || []), ...(arm.files || [])];

          // If electron-builder used single-file fields, normalize to files[]
          for (const key of ['path','url','sha512','blockMapSize','sha512checksum']) {
            if (x64[key] && !out.files?.length) {
              out.files = [{ url: x64.path || x64.url, sha512: x64.sha512, size: x64.filesize || x64.size }];
            }
          }

          // Keep the newer releaseDate/version if they differ
          try {
            const d1 = new Date(x64.releaseDate || 0), d2 = new Date(arm.releaseDate || 0);
            if (d2 > d1) {
              out.version = arm.version || out.version;
              out.releaseDate = arm.releaseDate || out.releaseDate;
            }
          } catch {}

          fs.writeFileSync('latest-mac.yml', yaml.stringify(out));
          console.log('Wrote merged latest-mac.yml with', out.files?.length || 0, 'entries');
          EOF

      - name: Publish Release with assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            # Windows
            release_assets/windows/*.exe
            release_assets/windows/*.exe.blockmap
            release_assets/windows/latest*.yml

            # macOS zips (+ blockmaps) from both folders
            release_assets/mac-*/InterlisIDE*-mac.zip
            release_assets/mac-*/InterlisIDE*-mac.zip.blockmap

            # merged feed (single file)
            release_assets/latest-mac.yml

            # macOS DMGs (renamed by your earlier step)
            release_assets/mac-*/InterlisIDE*-arm64.dmg
            release_assets/mac-*/InterlisIDE*-x64.dmg
            release_assets/mac-*/InterlisIDE*-arm64.dmg.blockmap
            release_assets/mac-*/InterlisIDE*-x64.dmg.blockmap

            # Linux
            release_assets/linux-*/InterlisIDE*-arm64.AppImage
            release_assets/linux-*/InterlisIDE*-x64.AppImage
            release_assets/linux-*/InterlisIDE*-arm64.deb
            release_assets/linux-*/InterlisIDE*-x64.deb
            release_assets/linux-*/latest-linux*.yml
          generate_release_notes: true
          draft: false
          prerelease: true
          make_latest: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}